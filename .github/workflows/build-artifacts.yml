# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: "Build Godot artifacts"

on:
  workflow_dispatch:
    inputs:
      godot-version:
        description: 'Version to build (for example "4.0.1")'
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: write

# Environment variables used in this workflow:
# * GODOT4_VER:          Short Godot version name, coming from workflow input ("4.0.1", "4.1-rc1", ...)
# * GODOT4_UPSTREAM_VER: Godot version as used in URLs and filenames ("4.0.1-stable", "4.1-rc1", ...)
# * GODOT4_FULL_VER:     Output from godot4 --version ("4.0.stable.official.92bee43ad")
# * RUST_VER:            Rust compiler version
# * BINDGEN_VER:         Version of `bindgen` used to generate the GDExtension header

jobs:
  # ----------------------------------------------------------------------------------------------------------------------------------------------

  generate-header:
    name: generate-header (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11
            rust-toolchain: stable
            with-llvm: true

          - name: windows
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare versions"
        run: |
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version "${{ runner.temp }}"

      - name: "Install Rust"
        run: |
          rustup toolchain install stable --profile minimal --no-self-update ${{ steps.configure.outputs.components }}
          rustup default stable
          echo RUST_VER=$(rustc --version | sed -E "s/rustc ([0-9.]+) \\(.+/\\1/" ) >> $GITHUB_ENV

      # Note: This is a replacement for Swatinem/rust-cache which doesn't work reliably at the moment.
      # The latter tries to save the cache under a different key than the one it restores, and even fails at doing so.
      # Do not cache whole target directory, e.g. godot-gen should be excluded.
      - name: "Cache for Rust ${{ env.RUST_VER }}"
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/debug
            target/.rustc_info.json
            llvm/
          key: ${{ runner.os }}-rust-${{ env.RUST_VER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-rust-${{ env.RUST_VER }}-

#      - name: "Cache for Rust ${{ env.RUST_VER }}"
#        uses: Swatinem/rust-cache@v2
#        with:
#          # A cache key that is used instead of the automatic `job`-based key, and is stable over multiple jobs.
#          # default: empty
#          shared-key: "${{ env.RUST_VER }}-${{ runner.os }}"
#
#          # An additional cache key that is added alongside the automatic `job`-based
#          # cache key and can be used to further differentiate jobs.
#          # default: empty
#          #key: ${{ inputs.cache-key }}
#
#          # Determines if the cache should be saved even when the workflow has failed.
#          # default: "false"
##          cache-on-failure: true
#
#          # The cargo workspaces and target directory configuration.
#          # These entries are separated by newlines and have the form
#          # `$workspace -> $target`. The `$target` part is treated as a directory
#          # relative to the `$workspace` and defaults to "target" if not explicitly given.
#          # default: ". -> target"
#          workspaces: generator -> target

      - name: "Set Rust environment variables"
        run: |
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          echo RUST_BACKTRACE=1 >> $GITHUB_ENV

          rustc --version --verbose

      - name: "Install LLVM"
        if: ${{ matrix.with-llvm }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: llvm
          cached: ${{ steps.cache.outputs.cache-hit }}

      - name: "Download GDExtension header"
        run: |
          curl https://raw.githubusercontent.com/godotengine/godot/master/core/extension/gdextension_interface.h \
            -o ".generated/gdextension_interface.h" \
            --create-dirs \
            --retry 3
          cat ".generated/gdextension_interface.h" | grep "404: Not Found" && {
            echo "Failed to download GDExtension header from GitHub."
            exit 1
          }
          echo "Temp directory:"
          ls -la ".generated"
        shell: bash

      - name: "Translate header to Rust using bindgen"
        working-directory: generator
        run: cargo build -vv

      - name: "Move generated files + rename according to platform"
        run: |
          mkdir output
          mv .generated/* output/
          mv output/gdextension_interface.rs output/gdextension_interface_${{ matrix.name }}.rs
          rm output/*stats*

      - name: "Generate intermediate JSON (Linux only)"
        if: ${{ matrix.name == 'linux' }}
        run: |
          # Don't store in $GITHUB_ENV, only needed locally.
          export BINDGEN_VER="$(cd generator; cargo tree -p bindgen --depth 0 | sed 's/bindgen v//')"
          echo "BINDGEN_VER=$BINDGEN_VER"
          bash res/output-intermediate-json.sh > output/intermediate.json

      # Upload as short-lived artifact that can be consumed by dependent job
      - name: "Upload intermediate header as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: internal-header-${{ matrix.name }}
          path: output
          retention-days: 1

  # ----------------------------------------------------------------------------------------------------------------------------------------------

  download-godot:
    runs-on: ubuntu-latest
    needs: generate-header
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Download intermediate header (Linux)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-linux
          path: output

      - name: "Download intermediate header (Windows)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-windows
          path: output

      - name: "Download intermediate header (macOS)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-macos
          path: output

      - name: "Prepare versions"
        run: |
          echo "BINDGEN_VER=$(cat output/intermediate.json | jq -r '.versions.bindgen')" >> $GITHUB_ENV
          echo "RUST_VER=$(cat output/intermediate.json | jq -r '.versions.rust')" >> $GITHUB_ENV
          rm output/intermediate.json
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version "${{ runner.temp }}"

      - name: "Download Godot ${{ env.GODOT4_UPSTREAM_VER }}"
        # for gdnative: wget --no-verbose "https://downloads.tuxfamily.org/godotengine/$filePath/Godot_v${{ inputs.godot_ver }}_linux_headless.64.zip" -O /tmp/godot.zip
        run: |          
          wget --no-verbose "https://downloads.tuxfamily.org/godotengine/4.3/dev3/Godot_v4.3-dev3_linux.x86_64.zip" -O ${{ runner.temp }}/godot.zip || {
            echo "::error::Godot version '$GODOT4_UPSTREAM_VER' not available online."
            exit 1
          }
          unzip -o ${{ runner.temp }}/godot.zip -d "$GODOT4_DIR"

      - name: "Generate GDExtension API JSON"
        working-directory: output
        run: |
          ls -la "$GODOT4_DIR"
          /home/runner/work/_temp/godot_bin/Godot_v4.3-dev3_linux.x86_64 --headless --dump-extension-api
          echo "Output directory:"
          ls -la

      - name: "Generate meta JSON"
        run: |
          export GODOT4_FULL_VER=$($GODOT4_BIN --version)
          bash res/output-meta-json.sh > output/meta.json
          echo "Output directory:"
          ls -la output

      - name: "Commit to branch '${{ env.GODOT4_VER }}'"
        # GLOBIGNORE: https://stackoverflow.com/a/10448940, patterns separated by :
        run: |
          git config user.name "Godot-Rust Automation"
          git config user.email "GodotRust@users.noreply.github.com"
          git fetch
          git switch $GODOT4_VER || git switch -c $GODOT4_VER origin/root
          (GLOBIGNORE='.git:output'; rm -rf *)
          git restore --source origin/master -- prebuilt-template
          mv prebuilt-template/* .
          sed -i "s/%GODOT4_VER%/${GODOT4_VER}/" src/lib.rs
          sed -i "s/%RUST_VER%/${RUST_VER}/" src/lib.rs
          sed -i "s/%BINDGEN_VER%/${BINDGEN_VER}/" src/lib.rs
          mv output res
          git add *
          git commit -m "Godot $GODOT4_UPSTREAM_VER artifact sync"
          git push -u origin $GODOT4_VER

      - name: "Write summary"
        run: |
          echo "### :heavy_check_mark: Published artifact for Godot $GODOT4_VER" > $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat res/meta.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
